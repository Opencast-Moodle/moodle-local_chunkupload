{"version":3,"file":"chunkupload.min.js","sources":["../src/chunkupload.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Manage the upload in chunks.\n *\n * @module    local_chunkupload\n * @copyright  2020 Justus Dieckmann WWU\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport $ from 'jquery';\nimport {get_strings as getStrings} from 'core/str';\nimport notification from 'core/notification';\n\n/**\n * Init\n * @param {String} elementid string The id of the input element\n * @param {String|String[]} acceptedTypes The accepted Types\n * @param {int} maxBytes The maximal allowed amount of bytes\n * @param {string} wwwroot The wwwroot\n * @param {int} chunksize The chunksize in bytes\n * @param {string} browsetext Text to display when no file is uploaded.\n */\nexport function init(elementid, acceptedTypes, maxBytes, wwwroot, chunksize, browsetext) {\n    let wwwRoot,\n        chunkSize;\n\n    let fileinput, filename, progress, progressicon, deleteicon;\n\n    let token;\n\n    fileinput = $('#' + elementid + \"_file\");\n    token = $('#' + elementid).val();\n    let parentelem = fileinput.next();\n    filename = parentelem.find('.chunkupload-filename');\n    progress = parentelem.find('.chunkupload-progress');\n    progressicon = parentelem.find('.chunkupload-icon');\n    deleteicon = parentelem.next();\n    wwwRoot = wwwroot;\n    chunkSize = chunksize;\n    fileinput.change(() => {\n        reset();\n        let file = fileinput.get(0).files[0];\n        let fileextension = \".\";\n        if (file.name.indexOf(\".\") !== -1) {\n            let splits = file.name.split(\".\");\n            fileextension = \".\" + splits[splits.length - 1].toLowerCase();\n        }\n        if (!(acceptedTypes === '*' ||\n            acceptedTypes instanceof Array && (acceptedTypes.indexOf(fileextension) !== -1 || acceptedTypes.indexOf('*') !== -1))) {\n            fileinput.val(null);\n            notifyError({key: 'invalidfiletype', component: 'core_repository', param: fileextension});\n            return;\n        } else if (maxBytes !== -1 && file.size > maxBytes) {\n            fileinput.val(null);\n            notifyError({key: 'errorpostmaxsize', component: 'core_repository'});\n            return;\n        }\n        filename.text(file.name);\n        startUpload(file);\n    });\n\n    deleteicon.on('click', (event) => {\n        reset();\n        let params = {\n            id: token\n        };\n        let xhr = new XMLHttpRequest();\n        xhr.open('post', wwwRoot + \"/local/chunkupload/deleteupload_ajax.php?\" + $.param(params));\n        xhr.send(null);\n        filename.text(browsetext);\n        fileinput.val(null);\n        event.stopPropagation();\n    });\n\n    /**\n     * Start the Upload\n     * @param {File} file The File to upload.\n     */\n    function startUpload(file) {\n        let end = chunkSize < file.size ? chunkSize : file.size;\n        let params = {\n            start: 0,\n            end: end,\n            length: file.size,\n            filename: file.name,\n            id: token\n        };\n        let slice = file.slice(0, end);\n        let xhr = new XMLHttpRequest();\n        xhr.open('post', wwwRoot + \"/local/chunkupload/startupload_ajax.php?\" + $.param(params));\n        xhr.upload.onprogress = (e) => {\n            setProgress(e.loaded, file.size);\n        };\n        xhr.onreadystatechange = () => {\n            if (xhr.readyState === 4) {\n                if (xhr.status === 200) {\n                    let response = JSON.parse(xhr.responseText);\n                    if (response.error !== undefined) {\n                        notifyError(response.error);\n                    } else {\n                        if (end < file.size) {\n                            proceedUpload(file, chunkSize);\n                        }\n                    }\n                }\n            }\n        };\n        xhr.setRequestHeader('Content-Type', 'application/octet-stream');\n        xhr.send(slice);\n    }\n\n    /**\n     * Proceed the upload\n     * @param {File} file\n     * @param {int} start from where to proceed the upload.\n     */\n    function proceedUpload(file, start) {\n        let end = start + chunkSize < file.size ? start + chunkSize : file.size;\n        let params = {\n            start: start,\n            end: end,\n            id: token\n        };\n        let slice = file.slice(start, end);\n        let xhr = new XMLHttpRequest();\n        xhr.open('post', wwwRoot + \"/local/chunkupload/proceedupload_ajax.php?\" + $.param(params));\n        xhr.upload.onprogress = (e) => {\n            setProgress(e.loaded + start, file.size);\n        };\n        xhr.onreadystatechange = () => {\n            if (xhr.readyState === 4) {\n                if (xhr.status === 200) {\n                    let response = JSON.parse(xhr.responseText);\n                    if (response.error !== undefined) {\n                        notifyError(response.error);\n                    } else {\n                        if (end < file.size) {\n                            proceedUpload(file, end);\n                        }\n                    }\n                }\n            }\n        };\n        xhr.onerror = () => {\n            reset();\n            // Doesn't make sense to try to fetch strings when having internet problems.\n            notification.alert(\"Error\", \"Failure while uploading!\", \"Ok\");\n        };\n        xhr.setRequestHeader('Content-Type', 'application/octet-stream');\n        xhr.send(slice);\n    }\n\n    /**\n     * Resets the Progress and the Filepicker name.\n     */\n    function reset() {\n        setProgress(0, 1);\n        filename.text(\"\");\n    }\n\n    /**\n     * Sets the progressbar\n     * @param {int} loaded\n     * @param {int} total\n     */\n    function setProgress(loaded, total) {\n        if (loaded === total) {\n            // Hide progressbar on finish.\n            progress.css('width', '0');\n        } else {\n            progress.css('width', loaded * 100 / total + \"%\");\n        }\n        progressicon.prop('hidden', loaded !== total);\n        deleteicon.prop('hidden', loaded !== total);\n    }\n\n    /**\n     * Notify error\n     * @param {object|string} errorstring Either Object as accepted by getString, or a string, to describe the error.\n     */\n    function notifyError(errorstring) {\n        reset();\n        if (typeof errorstring === \"string\") {\n            getStrings([\n                {key: 'error'},\n                {key: 'ok'},\n            ]).done(function(s) {\n                    notification.alert(s[0], errorstring, s[1]);\n                }\n            ).fail(notification.exception);\n        } else {\n            getStrings([\n                {key: 'error'},\n                errorstring,\n                {key: 'ok'},\n            ]).done(function(s) {\n                    notification.alert(s[0], s[1], s[2]);\n                }\n            ).fail(notification.exception);\n        }\n    }\n}"],"names":["elementid","acceptedTypes","maxBytes","wwwroot","chunksize","browsetext","wwwRoot","chunkSize","fileinput","filename","progress","progressicon","deleteicon","token","val","parentelem","next","startUpload","file","end","size","params","start","length","name","id","slice","xhr","XMLHttpRequest","open","$","param","upload","onprogress","e","setProgress","loaded","onreadystatechange","readyState","status","response","JSON","parse","responseText","undefined","error","notifyError","proceedUpload","setRequestHeader","send","onerror","reset","alert","text","total","css","prop","errorstring","key","done","s","fail","notification","exception","find","change","get","files","fileextension","indexOf","splits","split","toLowerCase","Array","component","on","event","stopPropagation"],"mappings":";;;;;;;oFAmCqBA,UAAWC,cAAeC,SAAUC,QAASC,UAAWC,gBACrEC,QACAC,UAEAC,UAAWC,SAAUC,SAAUC,aAAcC,WAE7CC,MAEJL,WAAY,mBAAE,IAAMR,UAAY,SAChCa,OAAQ,mBAAE,IAAMb,WAAWc,UACvBC,WAAaP,UAAUQ,gBA8ClBC,YAAYC,UACbC,IAAMZ,UAAYW,KAAKE,KAAOb,UAAYW,KAAKE,KAC/CC,OAAS,CACTC,MAAO,EACPH,IAAKA,IACLI,OAAQL,KAAKE,KACbX,SAAUS,KAAKM,KACfC,GAAIZ,OAEJa,MAAQR,KAAKQ,MAAM,EAAGP,KACtBQ,IAAM,IAAIC,eACdD,IAAIE,KAAK,OAAQvB,QAAU,2CAA6CwB,gBAAEC,MAAMV,SAChFM,IAAIK,OAAOC,WAAcC,IACrBC,YAAYD,EAAEE,OAAQlB,KAAKE,OAE/BO,IAAIU,mBAAqB,QACE,IAAnBV,IAAIW,YACe,MAAfX,IAAIY,OAAgB,KAChBC,SAAWC,KAAKC,MAAMf,IAAIgB,mBACPC,IAAnBJ,SAASK,MACTC,YAAYN,SAASK,OAEjB1B,IAAMD,KAAKE,MACX2B,cAAc7B,KAAMX,aAMxCoB,IAAIqB,iBAAiB,eAAgB,4BACrCrB,IAAIsB,KAAKvB,gBAQJqB,cAAc7B,KAAMI,WACrBH,IAAMG,MAAQf,UAAYW,KAAKE,KAAOE,MAAQf,UAAYW,KAAKE,KAC/DC,OAAS,CACTC,MAAOA,MACPH,IAAKA,IACLM,GAAIZ,OAEJa,MAAQR,KAAKQ,MAAMJ,MAAOH,KAC1BQ,IAAM,IAAIC,eACdD,IAAIE,KAAK,OAAQvB,QAAU,6CAA+CwB,gBAAEC,MAAMV,SAClFM,IAAIK,OAAOC,WAAcC,IACrBC,YAAYD,EAAEE,OAASd,MAAOJ,KAAKE,OAEvCO,IAAIU,mBAAqB,QACE,IAAnBV,IAAIW,YACe,MAAfX,IAAIY,OAAgB,KAChBC,SAAWC,KAAKC,MAAMf,IAAIgB,mBACPC,IAAnBJ,SAASK,MACTC,YAAYN,SAASK,OAEjB1B,IAAMD,KAAKE,MACX2B,cAAc7B,KAAMC,OAMxCQ,IAAIuB,QAAU,KACVC,8BAEaC,MAAM,QAAS,2BAA4B,OAE5DzB,IAAIqB,iBAAiB,eAAgB,4BACrCrB,IAAIsB,KAAKvB,gBAMJyB,QACLhB,YAAY,EAAG,GACf1B,SAAS4C,KAAK,aAQTlB,YAAYC,OAAQkB,OACrBlB,SAAWkB,MAEX5C,SAAS6C,IAAI,QAAS,KAEtB7C,SAAS6C,IAAI,QAAkB,IAATnB,OAAekB,MAAQ,KAEjD3C,aAAa6C,KAAK,SAAUpB,SAAWkB,OACvC1C,WAAW4C,KAAK,SAAUpB,SAAWkB,gBAOhCR,YAAYW,aACjBN,QAC2B,iBAAhBM,iCACI,CACP,CAACC,IAAK,SACN,CAACA,IAAK,QACPC,MAAK,SAASC,yBACIR,MAAMQ,EAAE,GAAIH,YAAaG,EAAE,OAE9CC,KAAKC,sBAAaC,gCAET,CACP,CAACL,IAAK,SACND,YACA,CAACC,IAAK,QACPC,MAAK,SAASC,yBACIR,MAAMQ,EAAE,GAAIA,EAAE,GAAIA,EAAE,OAEvCC,KAAKC,sBAAaC,WArK5BtD,SAAWM,WAAWiD,KAAK,yBAC3BtD,SAAWK,WAAWiD,KAAK,yBAC3BrD,aAAeI,WAAWiD,KAAK,qBAC/BpD,WAAaG,WAAWC,OACxBV,QAAUH,QACVI,UAAYH,UACZI,UAAUyD,QAAO,KACbd,YACIjC,KAAOV,UAAU0D,IAAI,GAAGC,MAAM,GAC9BC,cAAgB,QACY,IAA5BlD,KAAKM,KAAK6C,QAAQ,KAAa,KAC3BC,OAASpD,KAAKM,KAAK+C,MAAM,KAC7BH,cAAgB,IAAME,OAAOA,OAAO/C,OAAS,GAAGiD,oBAE5B,MAAlBvE,eACFA,yBAAyBwE,SAAoD,IAA1CxE,cAAcoE,QAAQD,iBAAyD,IAAhCnE,cAAcoE,QAAQ,OAInF,IAAdnE,UAAmBgB,KAAKE,KAAOlB,UACtCM,UAAUM,IAAI,WACdgC,YAAY,CAACY,IAAK,mBAAoBgB,UAAW,sBAGrDjE,SAAS4C,KAAKnC,KAAKM,WACnBP,YAAYC,QATRV,UAAUM,IAAI,WACdgC,YAAY,CAACY,IAAK,kBAAmBgB,UAAW,kBAAmB3C,MAAOqC,oBAWlFxD,WAAW+D,GAAG,SAAUC,QACpBzB,YACI9B,OAAS,CACTI,GAAIZ,OAEJc,IAAM,IAAIC,eACdD,IAAIE,KAAK,OAAQvB,QAAU,4CAA8CwB,gBAAEC,MAAMV,SACjFM,IAAIsB,KAAK,MACTxC,SAAS4C,KAAKhD,YACdG,UAAUM,IAAI,MACd8D,MAAMC"}